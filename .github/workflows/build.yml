name: build

on:
  workflow_call:
    inputs:
      build_mode:
        required: true
        type: string
        default: "release"
      upload_artifacts:
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.13"
  CMAKE_VERSION: "4.0.3"

jobs:
  lint:
    name: Run cpplint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run cpplint
        run: |
          pip install cpplint
          python -m cpplint --exclude=./src/third_party --exclude=./out --exclude=./.venv --recursive --config=CPPLINT.cfg .
        shell: bash

  build:
    name: Build for ${{ matrix.target_platform }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_platform: linux
            cc: clang
            cxx: clang++
            llvm_version: "20"
          - os: windows-latest
            target_platform: windows
            cc: clang-cl
            cxx: clang-cl
            llvm_version: "20"
          - os: macos-latest
            target_platform: darwin
            cc: clang
            cxx: clang++
            llvm_version: "20"
          - os: ubuntu-latest
            target_platform: mingw
            cc: x86_64-w64-mingw32-clang
            cxx: x86_64-w64-mingw32-clang++
            llvm_version: "20"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: ~/.venv

      - name: Install Python dependencies
        run: |
          poetry config virtualenvs.create true
          poetry install

          # verify installation
          poetry --version
          poetry show --tree
          poetry env info
        shell: bash
        
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.os == 'ubuntu-latest' && format('/opt/llvm-{0}', matrix.llvm_version) || '' }}
            ${{ matrix.os == 'windows-latest' && 'C:/Program Files/LLVM' || '' }}
            ${{ matrix.os == 'macos-latest' && format('/usr/local/opt/llvm@{0}', matrix.llvm_version) || '' }}
          key: llvm-${{ matrix.os }}-${{ matrix.llvm_version }}

      - name: Install CMake (Windows)
        if: matrix.os == 'windows-latest'
        uses: jwlawson/actions-setup-cmake@v2.0.2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Install LLVM (Linux)
        if: matrix.os == 'ubuntu-latest' && steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          # Install LLVM
          # use latest llvm tools
          wget -qOllvm.sh https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh ${{ matrix.llvm_version }} all /opt/llvm-${{ matrix.llvm_version }} && rm ./llvm.sh
          echo "/opt/llvm-${{ matrix.llvm_version }}/bin" >> $GITHUB_PATH

          # Setup alternatives
          # TODO: restore these 3 lines when we switch to older LLVM tools
          # for tool in clang clang++ clang-tidy clang-format llvm-ar llvm-ranlib llvm-nm llvm-objcopy llvm-objdump llvm-strip FileCheck; do
          #   sudo update-alternatives --install /usr/bin/$tool $tool /usr/bin/$tool-${{ matrix.llvm_version }} 100
          # done

      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-llvm.outputs.cache-hit != 'true'
        uses: KyleMayes/install-llvm-action@v2.0.7
        with:
          version: ${{ matrix.llvm_version }}

      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest' && steps.cache-llvm.outputs.cache-hit != 'true'
        run: brew install llvm@${{ matrix.llvm_version }}
      

      - name: Install system dependencies
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest)
              packages="wget curl ninja-build nasm"
              if [ "${{ matrix.target_platform }}" = "mingw" ]; then
                  packages="$packages nsis wine"
              fi
              sudo apt-get -qq update
              sudo apt-get -qq install --no-install-recommends $packages

              # Install CMake
              cmake_url="https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh"
              wget -nv "${cmake_url}" -O cmake-installer.sh
              chmod +x cmake-installer.sh
              sudo ./cmake-installer.sh --skip-license --prefix=/usr/local
              rm cmake-installer.sh

              if [ "${{ matrix.target_platform }}" = "mingw" ]; then
                sudo apt-get -qq install --no-install-recommends nsis wine
                source ./src/build/scripts/install_llvm_mingw.sh
                echo "LLVM_MINGW_DIR=${LLVM_MINGW_DIR}" >> $GITHUB_ENV
              fi
              ;;
            windows-latest)
              choco install --no-progress -y nsis ninja nasm
              ;;
            macos-latest)
              brew update
              brew install --quiet nasm cmake lld@${{ matrix.llvm_version }}
              echo "$(brew --prefix llvm@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
              echo "$(brew --prefix lld@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
              ;;
          esac
        shell: bash

      - name: Build
        run: |
          BUILD_ARGS="--build_mode=${{ inputs.build_mode }} --target_platform=${{ matrix.target_platform }} --no-install --package --no-cpplint --no-clang_format --clang_tidy"
          EXTRA_ARGS="-DFEMTOLOG_INSTALL_LIBS=true,-DFEMTOLOG_INSTALL_HEADERS=true,-DFEMTOLOG_ENABLE_XRAY=false,-DFEMTOLOG_ENABLE_SANITIZERS=false,-DFEMTOLOG_ENABLE_BUILD_REPORT=false,-DFEMTOLOG_ENABLE_LTO=true,-DFEMTOLOG_ENABLE_NATIVE_ARCH=true,-DFEMTOLOG_ENABLE_LLVM_UNWIND=false,-DFEMTOLOG_ENABLE_VERBOSE=true,-DFEMTOLOG_ENABLE_COVERAGE=false,-DFEMTOLOG_ENABLE_WARNINGS_AS_ERRORS=false,-DFEMTOLOG_BUILD_SHARED=false,-DFEMTOLOG_BUILD_BENCHMARK=false,-DFEMTOLOG_BUILD_TESTING=false,-DFEMTOLOG_ENABLE_RUN_BENCHMARK_POST_BUILD=false,-DFEMTOLOG_ENABLE_RUN_TESTING_POST_BUILD=false"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Setup MSVC environment for Windows
            eval "$(vswhere.exe -latest -products \* -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath | sed 's|.*|"&/VC/Auxiliary/Build/vcvarsall.bat" x64|')"
          fi

          poetry run python -u src/build/scripts/build.py $BUILD_ARGS --extra_args="$EXTRA_ARGS"
        shell: bash

      - name: Upload artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: builds-${{ matrix.target_platform }}-${{ inputs.build_mode }}
          path: out/package/*/*.*
          retention-days: 3
          if-no-files-found: warn

  summary:
    if: ${{ inputs.upload_artifacts }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - uses: actions/download-artifact@v4
        with:
          pattern: builds-*-${{ inputs.build_mode }}
          path: ./artifacts/
        continue-on-error: true

      - name: Generate summary
        run: |
          [ -d "./artifacts" ] && (tree ./artifacts || ls -la ./artifacts) || echo "No artifacts found"
          poetry run python .github/workflows/scripts/summarize.py artifacts >> $GITHUB_STEP_SUMMARY
